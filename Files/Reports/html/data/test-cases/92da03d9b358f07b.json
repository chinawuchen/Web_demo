{"uid":"92da03d9b358f07b","name":"test_inquire_error[test_info2]","fullName":"Tests.TestInquire.test_inquire.TestInquire#test_inquire_error","historyId":"972cb61f4535c5fe7224f4b4b18e0aac","time":{"start":1689947120863,"stop":1689947121817,"duration":954},"status":"failed","statusMessage":"AssertionError: 没有找到匹配结果\nassert '对不起，没有找到匹配结果。' in 'wuchen111 | |我的 |设置 |消息 |提醒 |退出'","statusTrace":"sefl = <Tests.TestInquire.test_inquire.TestInquire object at 0x104ff7220>\ntest_info = {'CaseName': '查询_失败_没有找到匹配结果3', 'expected': '对不起，没有找到匹配结果。', 'iqname': 'Appium 是一个非常流行的开源自动化测试框架，支持各种操作系统的自动化。它可以与本机、混...上运行 Appium 检查器。Appium 在 iOS 和 Android 上的设置时间很复杂。Windows 操作系统不支持应用程序服务器的脚本录制。在包含 3000 多台真实设备的 Appium 云上自动化您的 iOS 应用程序。'}\nlogin_page = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7462391658d233bfbbd501075f5c130e\")>\n\n    @pytest.mark.parametrize(\"test_info\", cases_error)\n    def test_inquire_error(sefl, test_info, login_page):\n        logger.info(f\" 执行 {sys._getframe().f_code.co_name} 测试用例 \")\n        driver = login_page\n        inquire_page = InquirePage(driver)\n        logger.info(f\" 查询异常测试用例：{test_info['CaseName']} \")\n        inquire_page.get().inquire(test_info['iqname'])\n        user_info = inquire_page.get_inquire_error()\n        logger.info(f\"预期结果：{test_info['expected']}\")\n        logger.info(f\"实际结果：{user_info}\")\n        try:\n            assert test_info[\"expected\"] in user_info, \"没有找到匹配结果\"\n            logger.info(f\" 结束执行 {sys._getframe().f_code.co_name} 测试用例， 测试结果 --- PASS \")\n        except AssertionError as e:\n            logger.error(f\" 结束执行 {sys._getframe().f_code.co_name} 测试用例， 测试结果 --- False \")\n            inquire_page.save_screenshot(f\"失败用例截图：{(test_info['CaseName'])}\")\n>           raise e\n\nTests/TestInquire/test_inquire.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsefl = <Tests.TestInquire.test_inquire.TestInquire object at 0x104ff7220>\ntest_info = {'CaseName': '查询_失败_没有找到匹配结果3', 'expected': '对不起，没有找到匹配结果。', 'iqname': 'Appium 是一个非常流行的开源自动化测试框架，支持各种操作系统的自动化。它可以与本机、混...上运行 Appium 检查器。Appium 在 iOS 和 Android 上的设置时间很复杂。Windows 操作系统不支持应用程序服务器的脚本录制。在包含 3000 多台真实设备的 Appium 云上自动化您的 iOS 应用程序。'}\nlogin_page = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7462391658d233bfbbd501075f5c130e\")>\n\n    @pytest.mark.parametrize(\"test_info\", cases_error)\n    def test_inquire_error(sefl, test_info, login_page):\n        logger.info(f\" 执行 {sys._getframe().f_code.co_name} 测试用例 \")\n        driver = login_page\n        inquire_page = InquirePage(driver)\n        logger.info(f\" 查询异常测试用例：{test_info['CaseName']} \")\n        inquire_page.get().inquire(test_info['iqname'])\n        user_info = inquire_page.get_inquire_error()\n        logger.info(f\"预期结果：{test_info['expected']}\")\n        logger.info(f\"实际结果：{user_info}\")\n        try:\n>           assert test_info[\"expected\"] in user_info, \"没有找到匹配结果\"\nE           AssertionError: 没有找到匹配结果\nE           assert '对不起，没有找到匹配结果。' in 'wuchen111 | |我的 |设置 |消息 |提醒 |退出'\n\nTests/TestInquire/test_inquire.py:46: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1689947088999,"stop":1689947089020,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"browser","time":{"start":1689947089020,"stop":1689947091122,"duration":2102},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"login_page","time":{"start":1689947091123,"stop":1689947095987,"duration":4864},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 没有找到匹配结果\nassert '对不起，没有找到匹配结果。' in 'wuchen111 | |我的 |设置 |消息 |提醒 |退出'","statusTrace":"sefl = <Tests.TestInquire.test_inquire.TestInquire object at 0x104ff7220>\ntest_info = {'CaseName': '查询_失败_没有找到匹配结果3', 'expected': '对不起，没有找到匹配结果。', 'iqname': 'Appium 是一个非常流行的开源自动化测试框架，支持各种操作系统的自动化。它可以与本机、混...上运行 Appium 检查器。Appium 在 iOS 和 Android 上的设置时间很复杂。Windows 操作系统不支持应用程序服务器的脚本录制。在包含 3000 多台真实设备的 Appium 云上自动化您的 iOS 应用程序。'}\nlogin_page = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7462391658d233bfbbd501075f5c130e\")>\n\n    @pytest.mark.parametrize(\"test_info\", cases_error)\n    def test_inquire_error(sefl, test_info, login_page):\n        logger.info(f\" 执行 {sys._getframe().f_code.co_name} 测试用例 \")\n        driver = login_page\n        inquire_page = InquirePage(driver)\n        logger.info(f\" 查询异常测试用例：{test_info['CaseName']} \")\n        inquire_page.get().inquire(test_info['iqname'])\n        user_info = inquire_page.get_inquire_error()\n        logger.info(f\"预期结果：{test_info['expected']}\")\n        logger.info(f\"实际结果：{user_info}\")\n        try:\n            assert test_info[\"expected\"] in user_info, \"没有找到匹配结果\"\n            logger.info(f\" 结束执行 {sys._getframe().f_code.co_name} 测试用例， 测试结果 --- PASS \")\n        except AssertionError as e:\n            logger.error(f\" 结束执行 {sys._getframe().f_code.co_name} 测试用例， 测试结果 --- False \")\n            inquire_page.save_screenshot(f\"失败用例截图：{(test_info['CaseName'])}\")\n>           raise e\n\nTests/TestInquire/test_inquire.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsefl = <Tests.TestInquire.test_inquire.TestInquire object at 0x104ff7220>\ntest_info = {'CaseName': '查询_失败_没有找到匹配结果3', 'expected': '对不起，没有找到匹配结果。', 'iqname': 'Appium 是一个非常流行的开源自动化测试框架，支持各种操作系统的自动化。它可以与本机、混...上运行 Appium 检查器。Appium 在 iOS 和 Android 上的设置时间很复杂。Windows 操作系统不支持应用程序服务器的脚本录制。在包含 3000 多台真实设备的 Appium 云上自动化您的 iOS 应用程序。'}\nlogin_page = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7462391658d233bfbbd501075f5c130e\")>\n\n    @pytest.mark.parametrize(\"test_info\", cases_error)\n    def test_inquire_error(sefl, test_info, login_page):\n        logger.info(f\" 执行 {sys._getframe().f_code.co_name} 测试用例 \")\n        driver = login_page\n        inquire_page = InquirePage(driver)\n        logger.info(f\" 查询异常测试用例：{test_info['CaseName']} \")\n        inquire_page.get().inquire(test_info['iqname'])\n        user_info = inquire_page.get_inquire_error()\n        logger.info(f\"预期结果：{test_info['expected']}\")\n        logger.info(f\"实际结果：{user_info}\")\n        try:\n>           assert test_info[\"expected\"] in user_info, \"没有找到匹配结果\"\nE           AssertionError: 没有找到匹配结果\nE           assert '对不起，没有找到匹配结果。' in 'wuchen111 | |我的 |设置 |消息 |提醒 |退出'\n\nTests/TestInquire/test_inquire.py:46: AssertionError","steps":[],"attachments":[{"uid":"b3e0900952b803a7","name":"log","source":"b3e0900952b803a7.txt","type":"text/plain","size":511431}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1},"afterStages":[{"name":"browser::0","time":{"start":1689947195868,"stop":1689947195990,"duration":122},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"login_page::0","time":{"start":1689947195868,"stop":1689947195868,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"Tests.TestInquire"},{"name":"suite","value":"test_inquire"},{"name":"subSuite","value":"TestInquire"},{"name":"host","value":"wuchendeMacBook-Air.local"},{"name":"thread","value":"70940-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.TestInquire.test_inquire"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_info","value":"{'CaseName': '查询_失败_没有找到匹配结果3', 'iqname': 'Appium 是一个非常流行的开源自动化测试框架，支持各种操作系统的自动化。它可以与本机、混合和移动 Web 应用程序一起使用，以在各种环境中进行测试。它允许用户使用各种编程语言(如 Java、Perl、Python 等)编写自动化脚本。作为一个跨平台的测试工具，它将使用户能够通过结合Selenium WebDriver协议为 iOS、Windows 和 Android 运行移动自动化测试。Appium 在客户端-服务器架构上工作，由三个组件组成：Appium 客户端：它是用任何编程语言编写的自动化代码。Appium Server：它以JSON 格式接收并执行来自客户端的命令请求。终端设备：它是执行测试的仿真器或实时设备。是什么让 Appium 成为最好的移动自动化测试工具之一?它是一个开源自动化测试工具，因此是免费的。Appium 支持多种编程语言来编写测试脚本。它可以与各种 CI 工具集成，并通过 Internet 提供广泛的支持。总而言之，Appium 移动测试是应用测试自动化的绝佳选择。但是，它有一些限制：你不能在 Windows 设备上运行 Appium 检查器。Appium 在 iOS 和 Android 上的设置时间很复杂。Windows 操作系统不支持应用程序服务器的脚本录制。在包含 3000 多台真实设备的 Appium 云上自动化您的 iOS 应用程序。', 'expected': '对不起，没有找到匹配结果。'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"92da03d9b358f07b.json","parameterValues":["{'CaseName': '查询_失败_没有找到匹配结果3', 'iqname': 'Appium 是一个非常流行的开源自动化测试框架，支持各种操作系统的自动化。它可以与本机、混合和移动 Web 应用程序一起使用，以在各种环境中进行测试。它允许用户使用各种编程语言(如 Java、Perl、Python 等)编写自动化脚本。作为一个跨平台的测试工具，它将使用户能够通过结合Selenium WebDriver协议为 iOS、Windows 和 Android 运行移动自动化测试。Appium 在客户端-服务器架构上工作，由三个组件组成：Appium 客户端：它是用任何编程语言编写的自动化代码。Appium Server：它以JSON 格式接收并执行来自客户端的命令请求。终端设备：它是执行测试的仿真器或实时设备。是什么让 Appium 成为最好的移动自动化测试工具之一?它是一个开源自动化测试工具，因此是免费的。Appium 支持多种编程语言来编写测试脚本。它可以与各种 CI 工具集成，并通过 Internet 提供广泛的支持。总而言之，Appium 移动测试是应用测试自动化的绝佳选择。但是，它有一些限制：你不能在 Windows 设备上运行 Appium 检查器。Appium 在 iOS 和 Android 上的设置时间很复杂。Windows 操作系统不支持应用程序服务器的脚本录制。在包含 3000 多台真实设备的 Appium 云上自动化您的 iOS 应用程序。', 'expected': '对不起，没有找到匹配结果。'}"]}